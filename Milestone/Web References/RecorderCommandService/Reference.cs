//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 이 소스 코드가 Microsoft.VSDesigner, 버전 4.0.30319.42000에서 자동으로 생성되었습니다.
// 
#pragma warning disable 1591

namespace Milestone.RecorderCommandService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RecorderCommandServiceSoap", Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public partial class RecorderCommandService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback PTZMoveAbsoluteOperationCompleted;
        
        private System.Threading.SendOrPostCallback PTZMoveRelativeOperationCompleted;
        
        private System.Threading.SendOrPostCallback PTZMoveHomeOperationCompleted;
        
        private System.Threading.SendOrPostCallback PTZMoveStartOperationCompleted;
        
        private System.Threading.SendOrPostCallback PTZMoveStopOperationCompleted;
        
        private System.Threading.SendOrPostCallback PTZCenterOperationCompleted;
        
        private System.Threading.SendOrPostCallback PTZRectangleOperationCompleted;
        
        private System.Threading.SendOrPostCallback PTZGetAbsolutePositionOperationCompleted;
        
        private System.Threading.SendOrPostCallback PTZExtendedManualSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback PTZGetSessionInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback PTZReserveSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback PTZReleaseSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback PTZActivatePatrollingSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback PTZDeactivatePatrollingSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback PresetGetListOperationCompleted;
        
        private System.Threading.SendOrPostCallback PresetMoveToOperationCompleted;
        
        private System.Threading.SendOrPostCallback PresetSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback OutputActivateOperationCompleted;
        
        private System.Threading.SendOrPostCallback OutputDeactivateOperationCompleted;
        
        private System.Threading.SendOrPostCallback OutputTriggerOperationCompleted;
        
        private System.Threading.SendOrPostCallback OutputGetStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SequencesGetTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SequencesGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback SequencesGetAroundOperationCompleted;
        
        private System.Threading.SendOrPostCallback SequencesGetAroundWithSpanOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRetentionTimeLimitOperationCompleted;
        
        private System.Threading.SendOrPostCallback TimeLineInformationGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback SmartSearchStartOperationCompleted;
        
        private System.Threading.SendOrPostCallback SmartSearchCancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback SmartSearchGetStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback SmartSearchGetResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback JPEGGetAtOperationCompleted;
        
        private System.Threading.SendOrPostCallback JPEGGetAtOrBeforeOperationCompleted;
        
        private System.Threading.SendOrPostCallback JPEGGetAtOrAfterOperationCompleted;
        
        private System.Threading.SendOrPostCallback JPEGGetLiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback InputGetStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartRecordingOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendDriverCommandOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendDriverCommandWithResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback MulticastStartOperationCompleted;
        
        private System.Threading.SendOrPostCallback MulticastContinueOperationCompleted;
        
        private System.Threading.SendOrPostCallback MulticastStopOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsManualRecordingOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartManualRecordingOperationCompleted;
        
        private System.Threading.SendOrPostCallback StopManualRecordingOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public RecorderCommandService() {
            this.Url = global::Milestone.Properties.Settings.Default.Milestone_RecorderCommandService_RecorderCommandService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetVersionCompletedEventHandler GetVersionCompleted;
        
        /// <remarks/>
        public event PTZMoveAbsoluteCompletedEventHandler PTZMoveAbsoluteCompleted;
        
        /// <remarks/>
        public event PTZMoveRelativeCompletedEventHandler PTZMoveRelativeCompleted;
        
        /// <remarks/>
        public event PTZMoveHomeCompletedEventHandler PTZMoveHomeCompleted;
        
        /// <remarks/>
        public event PTZMoveStartCompletedEventHandler PTZMoveStartCompleted;
        
        /// <remarks/>
        public event PTZMoveStopCompletedEventHandler PTZMoveStopCompleted;
        
        /// <remarks/>
        public event PTZCenterCompletedEventHandler PTZCenterCompleted;
        
        /// <remarks/>
        public event PTZRectangleCompletedEventHandler PTZRectangleCompleted;
        
        /// <remarks/>
        public event PTZGetAbsolutePositionCompletedEventHandler PTZGetAbsolutePositionCompleted;
        
        /// <remarks/>
        public event PTZExtendedManualSessionCompletedEventHandler PTZExtendedManualSessionCompleted;
        
        /// <remarks/>
        public event PTZGetSessionInfoCompletedEventHandler PTZGetSessionInfoCompleted;
        
        /// <remarks/>
        public event PTZReserveSessionCompletedEventHandler PTZReserveSessionCompleted;
        
        /// <remarks/>
        public event PTZReleaseSessionCompletedEventHandler PTZReleaseSessionCompleted;
        
        /// <remarks/>
        public event PTZActivatePatrollingSchemaCompletedEventHandler PTZActivatePatrollingSchemaCompleted;
        
        /// <remarks/>
        public event PTZDeactivatePatrollingSchemaCompletedEventHandler PTZDeactivatePatrollingSchemaCompleted;
        
        /// <remarks/>
        public event PresetGetListCompletedEventHandler PresetGetListCompleted;
        
        /// <remarks/>
        public event PresetMoveToCompletedEventHandler PresetMoveToCompleted;
        
        /// <remarks/>
        public event PresetSetCompletedEventHandler PresetSetCompleted;
        
        /// <remarks/>
        public event OutputActivateCompletedEventHandler OutputActivateCompleted;
        
        /// <remarks/>
        public event OutputDeactivateCompletedEventHandler OutputDeactivateCompleted;
        
        /// <remarks/>
        public event OutputTriggerCompletedEventHandler OutputTriggerCompleted;
        
        /// <remarks/>
        public event OutputGetStateCompletedEventHandler OutputGetStateCompleted;
        
        /// <remarks/>
        public event SequencesGetTypesCompletedEventHandler SequencesGetTypesCompleted;
        
        /// <remarks/>
        public event SequencesGetCompletedEventHandler SequencesGetCompleted;
        
        /// <remarks/>
        public event SequencesGetAroundCompletedEventHandler SequencesGetAroundCompleted;
        
        /// <remarks/>
        public event SequencesGetAroundWithSpanCompletedEventHandler SequencesGetAroundWithSpanCompleted;
        
        /// <remarks/>
        public event GetRetentionTimeLimitCompletedEventHandler GetRetentionTimeLimitCompleted;
        
        /// <remarks/>
        public event TimeLineInformationGetCompletedEventHandler TimeLineInformationGetCompleted;
        
        /// <remarks/>
        public event SmartSearchStartCompletedEventHandler SmartSearchStartCompleted;
        
        /// <remarks/>
        public event SmartSearchCancelCompletedEventHandler SmartSearchCancelCompleted;
        
        /// <remarks/>
        public event SmartSearchGetStatusCompletedEventHandler SmartSearchGetStatusCompleted;
        
        /// <remarks/>
        public event SmartSearchGetResultCompletedEventHandler SmartSearchGetResultCompleted;
        
        /// <remarks/>
        public event JPEGGetAtCompletedEventHandler JPEGGetAtCompleted;
        
        /// <remarks/>
        public event JPEGGetAtOrBeforeCompletedEventHandler JPEGGetAtOrBeforeCompleted;
        
        /// <remarks/>
        public event JPEGGetAtOrAfterCompletedEventHandler JPEGGetAtOrAfterCompleted;
        
        /// <remarks/>
        public event JPEGGetLiveCompletedEventHandler JPEGGetLiveCompleted;
        
        /// <remarks/>
        public event InputGetStateCompletedEventHandler InputGetStateCompleted;
        
        /// <remarks/>
        public event StartRecordingCompletedEventHandler StartRecordingCompleted;
        
        /// <remarks/>
        public event SendDriverCommandCompletedEventHandler SendDriverCommandCompleted;
        
        /// <remarks/>
        public event SendDriverCommandWithResponseCompletedEventHandler SendDriverCommandWithResponseCompleted;
        
        /// <remarks/>
        public event MulticastStartCompletedEventHandler MulticastStartCompleted;
        
        /// <remarks/>
        public event MulticastContinueCompletedEventHandler MulticastContinueCompleted;
        
        /// <remarks/>
        public event MulticastStopCompletedEventHandler MulticastStopCompleted;
        
        /// <remarks/>
        public event IsManualRecordingCompletedEventHandler IsManualRecordingCompleted;
        
        /// <remarks/>
        public event StartManualRecordingCompletedEventHandler StartManualRecordingCompleted;
        
        /// <remarks/>
        public event StopManualRecordingCompletedEventHandler StopManualRecordingCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/GetVersion", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetVersion() {
            object[] results = this.Invoke("GetVersion", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetVersionAsync() {
            this.GetVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetVersionAsync(object userState) {
            if ((this.GetVersionOperationCompleted == null)) {
                this.GetVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionOperationCompleted);
            }
            this.InvokeAsync("GetVersion", new object[0], this.GetVersionOperationCompleted, userState);
        }
        
        private void OnGetVersionOperationCompleted(object arg) {
            if ((this.GetVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionCompleted(this, new GetVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/PTZMoveAbsolute", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PTZMoveAbsolute(string token, System.Guid deviceId, PTZArgs ptzArgs) {
            this.Invoke("PTZMoveAbsolute", new object[] {
                        token,
                        deviceId,
                        ptzArgs});
        }
        
        /// <remarks/>
        public void PTZMoveAbsoluteAsync(string token, System.Guid deviceId, PTZArgs ptzArgs) {
            this.PTZMoveAbsoluteAsync(token, deviceId, ptzArgs, null);
        }
        
        /// <remarks/>
        public void PTZMoveAbsoluteAsync(string token, System.Guid deviceId, PTZArgs ptzArgs, object userState) {
            if ((this.PTZMoveAbsoluteOperationCompleted == null)) {
                this.PTZMoveAbsoluteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPTZMoveAbsoluteOperationCompleted);
            }
            this.InvokeAsync("PTZMoveAbsolute", new object[] {
                        token,
                        deviceId,
                        ptzArgs}, this.PTZMoveAbsoluteOperationCompleted, userState);
        }
        
        private void OnPTZMoveAbsoluteOperationCompleted(object arg) {
            if ((this.PTZMoveAbsoluteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PTZMoveAbsoluteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/PTZMoveRelative", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PTZMoveRelative(string token, System.Guid deviceId, PTZArgs ptzArgs) {
            this.Invoke("PTZMoveRelative", new object[] {
                        token,
                        deviceId,
                        ptzArgs});
        }
        
        /// <remarks/>
        public void PTZMoveRelativeAsync(string token, System.Guid deviceId, PTZArgs ptzArgs) {
            this.PTZMoveRelativeAsync(token, deviceId, ptzArgs, null);
        }
        
        /// <remarks/>
        public void PTZMoveRelativeAsync(string token, System.Guid deviceId, PTZArgs ptzArgs, object userState) {
            if ((this.PTZMoveRelativeOperationCompleted == null)) {
                this.PTZMoveRelativeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPTZMoveRelativeOperationCompleted);
            }
            this.InvokeAsync("PTZMoveRelative", new object[] {
                        token,
                        deviceId,
                        ptzArgs}, this.PTZMoveRelativeOperationCompleted, userState);
        }
        
        private void OnPTZMoveRelativeOperationCompleted(object arg) {
            if ((this.PTZMoveRelativeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PTZMoveRelativeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/PTZMoveHome", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PTZMoveHome(string token, System.Guid deviceId) {
            this.Invoke("PTZMoveHome", new object[] {
                        token,
                        deviceId});
        }
        
        /// <remarks/>
        public void PTZMoveHomeAsync(string token, System.Guid deviceId) {
            this.PTZMoveHomeAsync(token, deviceId, null);
        }
        
        /// <remarks/>
        public void PTZMoveHomeAsync(string token, System.Guid deviceId, object userState) {
            if ((this.PTZMoveHomeOperationCompleted == null)) {
                this.PTZMoveHomeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPTZMoveHomeOperationCompleted);
            }
            this.InvokeAsync("PTZMoveHome", new object[] {
                        token,
                        deviceId}, this.PTZMoveHomeOperationCompleted, userState);
        }
        
        private void OnPTZMoveHomeOperationCompleted(object arg) {
            if ((this.PTZMoveHomeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PTZMoveHomeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/PTZMoveStart", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PTZMoveStart(string token, System.Guid deviceId, PTZArgs ptzArgs) {
            this.Invoke("PTZMoveStart", new object[] {
                        token,
                        deviceId,
                        ptzArgs});
        }
        
        /// <remarks/>
        public void PTZMoveStartAsync(string token, System.Guid deviceId, PTZArgs ptzArgs) {
            this.PTZMoveStartAsync(token, deviceId, ptzArgs, null);
        }
        
        /// <remarks/>
        public void PTZMoveStartAsync(string token, System.Guid deviceId, PTZArgs ptzArgs, object userState) {
            if ((this.PTZMoveStartOperationCompleted == null)) {
                this.PTZMoveStartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPTZMoveStartOperationCompleted);
            }
            this.InvokeAsync("PTZMoveStart", new object[] {
                        token,
                        deviceId,
                        ptzArgs}, this.PTZMoveStartOperationCompleted, userState);
        }
        
        private void OnPTZMoveStartOperationCompleted(object arg) {
            if ((this.PTZMoveStartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PTZMoveStartCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/PTZMoveStop", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PTZMoveStop(string token, System.Guid deviceId) {
            this.Invoke("PTZMoveStop", new object[] {
                        token,
                        deviceId});
        }
        
        /// <remarks/>
        public void PTZMoveStopAsync(string token, System.Guid deviceId) {
            this.PTZMoveStopAsync(token, deviceId, null);
        }
        
        /// <remarks/>
        public void PTZMoveStopAsync(string token, System.Guid deviceId, object userState) {
            if ((this.PTZMoveStopOperationCompleted == null)) {
                this.PTZMoveStopOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPTZMoveStopOperationCompleted);
            }
            this.InvokeAsync("PTZMoveStop", new object[] {
                        token,
                        deviceId}, this.PTZMoveStopOperationCompleted, userState);
        }
        
        private void OnPTZMoveStopOperationCompleted(object arg) {
            if ((this.PTZMoveStopCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PTZMoveStopCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/PTZCenter", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PTZCenter(string token, System.Guid deviceId, double refWidth, double refHeight, double centerX, double centerY, double zoom) {
            this.Invoke("PTZCenter", new object[] {
                        token,
                        deviceId,
                        refWidth,
                        refHeight,
                        centerX,
                        centerY,
                        zoom});
        }
        
        /// <remarks/>
        public void PTZCenterAsync(string token, System.Guid deviceId, double refWidth, double refHeight, double centerX, double centerY, double zoom) {
            this.PTZCenterAsync(token, deviceId, refWidth, refHeight, centerX, centerY, zoom, null);
        }
        
        /// <remarks/>
        public void PTZCenterAsync(string token, System.Guid deviceId, double refWidth, double refHeight, double centerX, double centerY, double zoom, object userState) {
            if ((this.PTZCenterOperationCompleted == null)) {
                this.PTZCenterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPTZCenterOperationCompleted);
            }
            this.InvokeAsync("PTZCenter", new object[] {
                        token,
                        deviceId,
                        refWidth,
                        refHeight,
                        centerX,
                        centerY,
                        zoom}, this.PTZCenterOperationCompleted, userState);
        }
        
        private void OnPTZCenterOperationCompleted(object arg) {
            if ((this.PTZCenterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PTZCenterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/PTZRectangle", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PTZRectangle(string token, System.Guid deviceId, double refWidth, double refHeight, double left, double top, double bottom, double right) {
            this.Invoke("PTZRectangle", new object[] {
                        token,
                        deviceId,
                        refWidth,
                        refHeight,
                        left,
                        top,
                        bottom,
                        right});
        }
        
        /// <remarks/>
        public void PTZRectangleAsync(string token, System.Guid deviceId, double refWidth, double refHeight, double left, double top, double bottom, double right) {
            this.PTZRectangleAsync(token, deviceId, refWidth, refHeight, left, top, bottom, right, null);
        }
        
        /// <remarks/>
        public void PTZRectangleAsync(string token, System.Guid deviceId, double refWidth, double refHeight, double left, double top, double bottom, double right, object userState) {
            if ((this.PTZRectangleOperationCompleted == null)) {
                this.PTZRectangleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPTZRectangleOperationCompleted);
            }
            this.InvokeAsync("PTZRectangle", new object[] {
                        token,
                        deviceId,
                        refWidth,
                        refHeight,
                        left,
                        top,
                        bottom,
                        right}, this.PTZRectangleOperationCompleted, userState);
        }
        
        private void OnPTZRectangleOperationCompleted(object arg) {
            if ((this.PTZRectangleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PTZRectangleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/PTZGetAbsolutePosition", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PTZArgs PTZGetAbsolutePosition(string token, System.Guid deviceId) {
            object[] results = this.Invoke("PTZGetAbsolutePosition", new object[] {
                        token,
                        deviceId});
            return ((PTZArgs)(results[0]));
        }
        
        /// <remarks/>
        public void PTZGetAbsolutePositionAsync(string token, System.Guid deviceId) {
            this.PTZGetAbsolutePositionAsync(token, deviceId, null);
        }
        
        /// <remarks/>
        public void PTZGetAbsolutePositionAsync(string token, System.Guid deviceId, object userState) {
            if ((this.PTZGetAbsolutePositionOperationCompleted == null)) {
                this.PTZGetAbsolutePositionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPTZGetAbsolutePositionOperationCompleted);
            }
            this.InvokeAsync("PTZGetAbsolutePosition", new object[] {
                        token,
                        deviceId}, this.PTZGetAbsolutePositionOperationCompleted, userState);
        }
        
        private void OnPTZGetAbsolutePositionOperationCompleted(object arg) {
            if ((this.PTZGetAbsolutePositionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PTZGetAbsolutePositionCompleted(this, new PTZGetAbsolutePositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/PTZExtendedManualSession", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PTZExtendedManualSession(string token, System.Guid deviceId) {
            this.Invoke("PTZExtendedManualSession", new object[] {
                        token,
                        deviceId});
        }
        
        /// <remarks/>
        public void PTZExtendedManualSessionAsync(string token, System.Guid deviceId) {
            this.PTZExtendedManualSessionAsync(token, deviceId, null);
        }
        
        /// <remarks/>
        public void PTZExtendedManualSessionAsync(string token, System.Guid deviceId, object userState) {
            if ((this.PTZExtendedManualSessionOperationCompleted == null)) {
                this.PTZExtendedManualSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPTZExtendedManualSessionOperationCompleted);
            }
            this.InvokeAsync("PTZExtendedManualSession", new object[] {
                        token,
                        deviceId}, this.PTZExtendedManualSessionOperationCompleted, userState);
        }
        
        private void OnPTZExtendedManualSessionOperationCompleted(object arg) {
            if ((this.PTZExtendedManualSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PTZExtendedManualSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/PTZGetSessionInfo", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PtzSessionInfo PTZGetSessionInfo(string token, System.Guid deviceId) {
            object[] results = this.Invoke("PTZGetSessionInfo", new object[] {
                        token,
                        deviceId});
            return ((PtzSessionInfo)(results[0]));
        }
        
        /// <remarks/>
        public void PTZGetSessionInfoAsync(string token, System.Guid deviceId) {
            this.PTZGetSessionInfoAsync(token, deviceId, null);
        }
        
        /// <remarks/>
        public void PTZGetSessionInfoAsync(string token, System.Guid deviceId, object userState) {
            if ((this.PTZGetSessionInfoOperationCompleted == null)) {
                this.PTZGetSessionInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPTZGetSessionInfoOperationCompleted);
            }
            this.InvokeAsync("PTZGetSessionInfo", new object[] {
                        token,
                        deviceId}, this.PTZGetSessionInfoOperationCompleted, userState);
        }
        
        private void OnPTZGetSessionInfoOperationCompleted(object arg) {
            if ((this.PTZGetSessionInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PTZGetSessionInfoCompleted(this, new PTZGetSessionInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/PTZReserveSession", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PTZReserveSession(string token, System.Guid deviceId) {
            this.Invoke("PTZReserveSession", new object[] {
                        token,
                        deviceId});
        }
        
        /// <remarks/>
        public void PTZReserveSessionAsync(string token, System.Guid deviceId) {
            this.PTZReserveSessionAsync(token, deviceId, null);
        }
        
        /// <remarks/>
        public void PTZReserveSessionAsync(string token, System.Guid deviceId, object userState) {
            if ((this.PTZReserveSessionOperationCompleted == null)) {
                this.PTZReserveSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPTZReserveSessionOperationCompleted);
            }
            this.InvokeAsync("PTZReserveSession", new object[] {
                        token,
                        deviceId}, this.PTZReserveSessionOperationCompleted, userState);
        }
        
        private void OnPTZReserveSessionOperationCompleted(object arg) {
            if ((this.PTZReserveSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PTZReserveSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/PTZReleaseSession", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PTZReleaseSession(string token, System.Guid deviceId) {
            this.Invoke("PTZReleaseSession", new object[] {
                        token,
                        deviceId});
        }
        
        /// <remarks/>
        public void PTZReleaseSessionAsync(string token, System.Guid deviceId) {
            this.PTZReleaseSessionAsync(token, deviceId, null);
        }
        
        /// <remarks/>
        public void PTZReleaseSessionAsync(string token, System.Guid deviceId, object userState) {
            if ((this.PTZReleaseSessionOperationCompleted == null)) {
                this.PTZReleaseSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPTZReleaseSessionOperationCompleted);
            }
            this.InvokeAsync("PTZReleaseSession", new object[] {
                        token,
                        deviceId}, this.PTZReleaseSessionOperationCompleted, userState);
        }
        
        private void OnPTZReleaseSessionOperationCompleted(object arg) {
            if ((this.PTZReleaseSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PTZReleaseSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/PTZActivatePatrollingSchema", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PTZActivatePatrollingSchema(string token, System.Guid deviceId, System.Guid patrollingSchemaId) {
            this.Invoke("PTZActivatePatrollingSchema", new object[] {
                        token,
                        deviceId,
                        patrollingSchemaId});
        }
        
        /// <remarks/>
        public void PTZActivatePatrollingSchemaAsync(string token, System.Guid deviceId, System.Guid patrollingSchemaId) {
            this.PTZActivatePatrollingSchemaAsync(token, deviceId, patrollingSchemaId, null);
        }
        
        /// <remarks/>
        public void PTZActivatePatrollingSchemaAsync(string token, System.Guid deviceId, System.Guid patrollingSchemaId, object userState) {
            if ((this.PTZActivatePatrollingSchemaOperationCompleted == null)) {
                this.PTZActivatePatrollingSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPTZActivatePatrollingSchemaOperationCompleted);
            }
            this.InvokeAsync("PTZActivatePatrollingSchema", new object[] {
                        token,
                        deviceId,
                        patrollingSchemaId}, this.PTZActivatePatrollingSchemaOperationCompleted, userState);
        }
        
        private void OnPTZActivatePatrollingSchemaOperationCompleted(object arg) {
            if ((this.PTZActivatePatrollingSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PTZActivatePatrollingSchemaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/PTZDeactivatePatrollingSchema", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PTZDeactivatePatrollingSchema(string token, System.Guid deviceId, System.Guid patrollingSchemaId) {
            this.Invoke("PTZDeactivatePatrollingSchema", new object[] {
                        token,
                        deviceId,
                        patrollingSchemaId});
        }
        
        /// <remarks/>
        public void PTZDeactivatePatrollingSchemaAsync(string token, System.Guid deviceId, System.Guid patrollingSchemaId) {
            this.PTZDeactivatePatrollingSchemaAsync(token, deviceId, patrollingSchemaId, null);
        }
        
        /// <remarks/>
        public void PTZDeactivatePatrollingSchemaAsync(string token, System.Guid deviceId, System.Guid patrollingSchemaId, object userState) {
            if ((this.PTZDeactivatePatrollingSchemaOperationCompleted == null)) {
                this.PTZDeactivatePatrollingSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPTZDeactivatePatrollingSchemaOperationCompleted);
            }
            this.InvokeAsync("PTZDeactivatePatrollingSchema", new object[] {
                        token,
                        deviceId,
                        patrollingSchemaId}, this.PTZDeactivatePatrollingSchemaOperationCompleted, userState);
        }
        
        private void OnPTZDeactivatePatrollingSchemaOperationCompleted(object arg) {
            if ((this.PTZDeactivatePatrollingSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PTZDeactivatePatrollingSchemaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/PresetGetList", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] PresetGetList(string token, System.Guid deviceId) {
            object[] results = this.Invoke("PresetGetList", new object[] {
                        token,
                        deviceId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void PresetGetListAsync(string token, System.Guid deviceId) {
            this.PresetGetListAsync(token, deviceId, null);
        }
        
        /// <remarks/>
        public void PresetGetListAsync(string token, System.Guid deviceId, object userState) {
            if ((this.PresetGetListOperationCompleted == null)) {
                this.PresetGetListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPresetGetListOperationCompleted);
            }
            this.InvokeAsync("PresetGetList", new object[] {
                        token,
                        deviceId}, this.PresetGetListOperationCompleted, userState);
        }
        
        private void OnPresetGetListOperationCompleted(object arg) {
            if ((this.PresetGetListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PresetGetListCompleted(this, new PresetGetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/PresetMoveTo", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PresetMoveTo(string token, System.Guid deviceId, string presetName) {
            this.Invoke("PresetMoveTo", new object[] {
                        token,
                        deviceId,
                        presetName});
        }
        
        /// <remarks/>
        public void PresetMoveToAsync(string token, System.Guid deviceId, string presetName) {
            this.PresetMoveToAsync(token, deviceId, presetName, null);
        }
        
        /// <remarks/>
        public void PresetMoveToAsync(string token, System.Guid deviceId, string presetName, object userState) {
            if ((this.PresetMoveToOperationCompleted == null)) {
                this.PresetMoveToOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPresetMoveToOperationCompleted);
            }
            this.InvokeAsync("PresetMoveTo", new object[] {
                        token,
                        deviceId,
                        presetName}, this.PresetMoveToOperationCompleted, userState);
        }
        
        private void OnPresetMoveToOperationCompleted(object arg) {
            if ((this.PresetMoveToCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PresetMoveToCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/PresetSet", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PresetSet(string token, System.Guid deviceId, string presetName) {
            this.Invoke("PresetSet", new object[] {
                        token,
                        deviceId,
                        presetName});
        }
        
        /// <remarks/>
        public void PresetSetAsync(string token, System.Guid deviceId, string presetName) {
            this.PresetSetAsync(token, deviceId, presetName, null);
        }
        
        /// <remarks/>
        public void PresetSetAsync(string token, System.Guid deviceId, string presetName, object userState) {
            if ((this.PresetSetOperationCompleted == null)) {
                this.PresetSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPresetSetOperationCompleted);
            }
            this.InvokeAsync("PresetSet", new object[] {
                        token,
                        deviceId,
                        presetName}, this.PresetSetOperationCompleted, userState);
        }
        
        private void OnPresetSetOperationCompleted(object arg) {
            if ((this.PresetSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PresetSetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/OutputActivate", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void OutputActivate(string token, System.Guid deviceId) {
            this.Invoke("OutputActivate", new object[] {
                        token,
                        deviceId});
        }
        
        /// <remarks/>
        public void OutputActivateAsync(string token, System.Guid deviceId) {
            this.OutputActivateAsync(token, deviceId, null);
        }
        
        /// <remarks/>
        public void OutputActivateAsync(string token, System.Guid deviceId, object userState) {
            if ((this.OutputActivateOperationCompleted == null)) {
                this.OutputActivateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOutputActivateOperationCompleted);
            }
            this.InvokeAsync("OutputActivate", new object[] {
                        token,
                        deviceId}, this.OutputActivateOperationCompleted, userState);
        }
        
        private void OnOutputActivateOperationCompleted(object arg) {
            if ((this.OutputActivateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OutputActivateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/OutputDeactivate", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void OutputDeactivate(string token, System.Guid deviceId) {
            this.Invoke("OutputDeactivate", new object[] {
                        token,
                        deviceId});
        }
        
        /// <remarks/>
        public void OutputDeactivateAsync(string token, System.Guid deviceId) {
            this.OutputDeactivateAsync(token, deviceId, null);
        }
        
        /// <remarks/>
        public void OutputDeactivateAsync(string token, System.Guid deviceId, object userState) {
            if ((this.OutputDeactivateOperationCompleted == null)) {
                this.OutputDeactivateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOutputDeactivateOperationCompleted);
            }
            this.InvokeAsync("OutputDeactivate", new object[] {
                        token,
                        deviceId}, this.OutputDeactivateOperationCompleted, userState);
        }
        
        private void OnOutputDeactivateOperationCompleted(object arg) {
            if ((this.OutputDeactivateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OutputDeactivateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/OutputTrigger", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void OutputTrigger(string token, System.Guid deviceId, TimeDuration duration) {
            this.Invoke("OutputTrigger", new object[] {
                        token,
                        deviceId,
                        duration});
        }
        
        /// <remarks/>
        public void OutputTriggerAsync(string token, System.Guid deviceId, TimeDuration duration) {
            this.OutputTriggerAsync(token, deviceId, duration, null);
        }
        
        /// <remarks/>
        public void OutputTriggerAsync(string token, System.Guid deviceId, TimeDuration duration, object userState) {
            if ((this.OutputTriggerOperationCompleted == null)) {
                this.OutputTriggerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOutputTriggerOperationCompleted);
            }
            this.InvokeAsync("OutputTrigger", new object[] {
                        token,
                        deviceId,
                        duration}, this.OutputTriggerOperationCompleted, userState);
        }
        
        private void OnOutputTriggerOperationCompleted(object arg) {
            if ((this.OutputTriggerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OutputTriggerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/OutputGetState", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IOState OutputGetState(string token, System.Guid deviceId) {
            object[] results = this.Invoke("OutputGetState", new object[] {
                        token,
                        deviceId});
            return ((IOState)(results[0]));
        }
        
        /// <remarks/>
        public void OutputGetStateAsync(string token, System.Guid deviceId) {
            this.OutputGetStateAsync(token, deviceId, null);
        }
        
        /// <remarks/>
        public void OutputGetStateAsync(string token, System.Guid deviceId, object userState) {
            if ((this.OutputGetStateOperationCompleted == null)) {
                this.OutputGetStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOutputGetStateOperationCompleted);
            }
            this.InvokeAsync("OutputGetState", new object[] {
                        token,
                        deviceId}, this.OutputGetStateOperationCompleted, userState);
        }
        
        private void OnOutputGetStateOperationCompleted(object arg) {
            if ((this.OutputGetStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OutputGetStateCompleted(this, new OutputGetStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/SequencesGetTypes", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SequenceType[] SequencesGetTypes(string token, System.Guid deviceId) {
            object[] results = this.Invoke("SequencesGetTypes", new object[] {
                        token,
                        deviceId});
            return ((SequenceType[])(results[0]));
        }
        
        /// <remarks/>
        public void SequencesGetTypesAsync(string token, System.Guid deviceId) {
            this.SequencesGetTypesAsync(token, deviceId, null);
        }
        
        /// <remarks/>
        public void SequencesGetTypesAsync(string token, System.Guid deviceId, object userState) {
            if ((this.SequencesGetTypesOperationCompleted == null)) {
                this.SequencesGetTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSequencesGetTypesOperationCompleted);
            }
            this.InvokeAsync("SequencesGetTypes", new object[] {
                        token,
                        deviceId}, this.SequencesGetTypesOperationCompleted, userState);
        }
        
        private void OnSequencesGetTypesOperationCompleted(object arg) {
            if ((this.SequencesGetTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SequencesGetTypesCompleted(this, new SequencesGetTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/SequencesGet", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SequenceEntry[] SequencesGet(string token, System.Guid deviceId, System.Guid sequenceType, System.DateTime minTime, System.DateTime maxTime, int maxCount) {
            object[] results = this.Invoke("SequencesGet", new object[] {
                        token,
                        deviceId,
                        sequenceType,
                        minTime,
                        maxTime,
                        maxCount});
            return ((SequenceEntry[])(results[0]));
        }
        
        /// <remarks/>
        public void SequencesGetAsync(string token, System.Guid deviceId, System.Guid sequenceType, System.DateTime minTime, System.DateTime maxTime, int maxCount) {
            this.SequencesGetAsync(token, deviceId, sequenceType, minTime, maxTime, maxCount, null);
        }
        
        /// <remarks/>
        public void SequencesGetAsync(string token, System.Guid deviceId, System.Guid sequenceType, System.DateTime minTime, System.DateTime maxTime, int maxCount, object userState) {
            if ((this.SequencesGetOperationCompleted == null)) {
                this.SequencesGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSequencesGetOperationCompleted);
            }
            this.InvokeAsync("SequencesGet", new object[] {
                        token,
                        deviceId,
                        sequenceType,
                        minTime,
                        maxTime,
                        maxCount}, this.SequencesGetOperationCompleted, userState);
        }
        
        private void OnSequencesGetOperationCompleted(object arg) {
            if ((this.SequencesGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SequencesGetCompleted(this, new SequencesGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/SequencesGetAround", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SequenceEntry[] SequencesGetAround(string token, System.Guid deviceId, System.Guid sequenceType, System.DateTime centerTime, int maxCountBefore, int maxCountAfter) {
            object[] results = this.Invoke("SequencesGetAround", new object[] {
                        token,
                        deviceId,
                        sequenceType,
                        centerTime,
                        maxCountBefore,
                        maxCountAfter});
            return ((SequenceEntry[])(results[0]));
        }
        
        /// <remarks/>
        public void SequencesGetAroundAsync(string token, System.Guid deviceId, System.Guid sequenceType, System.DateTime centerTime, int maxCountBefore, int maxCountAfter) {
            this.SequencesGetAroundAsync(token, deviceId, sequenceType, centerTime, maxCountBefore, maxCountAfter, null);
        }
        
        /// <remarks/>
        public void SequencesGetAroundAsync(string token, System.Guid deviceId, System.Guid sequenceType, System.DateTime centerTime, int maxCountBefore, int maxCountAfter, object userState) {
            if ((this.SequencesGetAroundOperationCompleted == null)) {
                this.SequencesGetAroundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSequencesGetAroundOperationCompleted);
            }
            this.InvokeAsync("SequencesGetAround", new object[] {
                        token,
                        deviceId,
                        sequenceType,
                        centerTime,
                        maxCountBefore,
                        maxCountAfter}, this.SequencesGetAroundOperationCompleted, userState);
        }
        
        private void OnSequencesGetAroundOperationCompleted(object arg) {
            if ((this.SequencesGetAroundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SequencesGetAroundCompleted(this, new SequencesGetAroundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/SequencesGetAroundWithSpan", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SequenceEntry[] SequencesGetAroundWithSpan(string token, System.Guid deviceId, System.Guid sequenceType, System.DateTime centerTime, TimeDuration maxTimeBefore, int maxCountBefore, TimeDuration maxTimeAfter, int maxCountAfter) {
            object[] results = this.Invoke("SequencesGetAroundWithSpan", new object[] {
                        token,
                        deviceId,
                        sequenceType,
                        centerTime,
                        maxTimeBefore,
                        maxCountBefore,
                        maxTimeAfter,
                        maxCountAfter});
            return ((SequenceEntry[])(results[0]));
        }
        
        /// <remarks/>
        public void SequencesGetAroundWithSpanAsync(string token, System.Guid deviceId, System.Guid sequenceType, System.DateTime centerTime, TimeDuration maxTimeBefore, int maxCountBefore, TimeDuration maxTimeAfter, int maxCountAfter) {
            this.SequencesGetAroundWithSpanAsync(token, deviceId, sequenceType, centerTime, maxTimeBefore, maxCountBefore, maxTimeAfter, maxCountAfter, null);
        }
        
        /// <remarks/>
        public void SequencesGetAroundWithSpanAsync(string token, System.Guid deviceId, System.Guid sequenceType, System.DateTime centerTime, TimeDuration maxTimeBefore, int maxCountBefore, TimeDuration maxTimeAfter, int maxCountAfter, object userState) {
            if ((this.SequencesGetAroundWithSpanOperationCompleted == null)) {
                this.SequencesGetAroundWithSpanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSequencesGetAroundWithSpanOperationCompleted);
            }
            this.InvokeAsync("SequencesGetAroundWithSpan", new object[] {
                        token,
                        deviceId,
                        sequenceType,
                        centerTime,
                        maxTimeBefore,
                        maxCountBefore,
                        maxTimeAfter,
                        maxCountAfter}, this.SequencesGetAroundWithSpanOperationCompleted, userState);
        }
        
        private void OnSequencesGetAroundWithSpanOperationCompleted(object arg) {
            if ((this.SequencesGetAroundWithSpanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SequencesGetAroundWithSpanCompleted(this, new SequencesGetAroundWithSpanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/GetRetentionTimeLimit", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime GetRetentionTimeLimit(string token, System.Guid deviceId) {
            object[] results = this.Invoke("GetRetentionTimeLimit", new object[] {
                        token,
                        deviceId});
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void GetRetentionTimeLimitAsync(string token, System.Guid deviceId) {
            this.GetRetentionTimeLimitAsync(token, deviceId, null);
        }
        
        /// <remarks/>
        public void GetRetentionTimeLimitAsync(string token, System.Guid deviceId, object userState) {
            if ((this.GetRetentionTimeLimitOperationCompleted == null)) {
                this.GetRetentionTimeLimitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRetentionTimeLimitOperationCompleted);
            }
            this.InvokeAsync("GetRetentionTimeLimit", new object[] {
                        token,
                        deviceId}, this.GetRetentionTimeLimitOperationCompleted, userState);
        }
        
        private void OnGetRetentionTimeLimitOperationCompleted(object arg) {
            if ((this.GetRetentionTimeLimitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRetentionTimeLimitCompleted(this, new GetRetentionTimeLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/TimeLineInformationGet", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TimeLineInformationData[] TimeLineInformationGet(string token, System.Guid deviceId, System.Guid[] timeLineInformationTypes, System.DateTime timeLineInformationBeginTime, TimeDuration timeLineInformationInterval, int timeLineInformationCount) {
            object[] results = this.Invoke("TimeLineInformationGet", new object[] {
                        token,
                        deviceId,
                        timeLineInformationTypes,
                        timeLineInformationBeginTime,
                        timeLineInformationInterval,
                        timeLineInformationCount});
            return ((TimeLineInformationData[])(results[0]));
        }
        
        /// <remarks/>
        public void TimeLineInformationGetAsync(string token, System.Guid deviceId, System.Guid[] timeLineInformationTypes, System.DateTime timeLineInformationBeginTime, TimeDuration timeLineInformationInterval, int timeLineInformationCount) {
            this.TimeLineInformationGetAsync(token, deviceId, timeLineInformationTypes, timeLineInformationBeginTime, timeLineInformationInterval, timeLineInformationCount, null);
        }
        
        /// <remarks/>
        public void TimeLineInformationGetAsync(string token, System.Guid deviceId, System.Guid[] timeLineInformationTypes, System.DateTime timeLineInformationBeginTime, TimeDuration timeLineInformationInterval, int timeLineInformationCount, object userState) {
            if ((this.TimeLineInformationGetOperationCompleted == null)) {
                this.TimeLineInformationGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTimeLineInformationGetOperationCompleted);
            }
            this.InvokeAsync("TimeLineInformationGet", new object[] {
                        token,
                        deviceId,
                        timeLineInformationTypes,
                        timeLineInformationBeginTime,
                        timeLineInformationInterval,
                        timeLineInformationCount}, this.TimeLineInformationGetOperationCompleted, userState);
        }
        
        private void OnTimeLineInformationGetOperationCompleted(object arg) {
            if ((this.TimeLineInformationGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TimeLineInformationGetCompleted(this, new TimeLineInformationGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/SmartSearchStart", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid SmartSearchStart(string token, System.Guid deviceId, System.DateTime searchBeginTime, System.DateTime searchEndTime, int sensitivity, TimeDuration searchInterval, ImageMask searchMask, bool ignoreInitialMotion, Size resultMotionMaskSize) {
            object[] results = this.Invoke("SmartSearchStart", new object[] {
                        token,
                        deviceId,
                        searchBeginTime,
                        searchEndTime,
                        sensitivity,
                        searchInterval,
                        searchMask,
                        ignoreInitialMotion,
                        resultMotionMaskSize});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void SmartSearchStartAsync(string token, System.Guid deviceId, System.DateTime searchBeginTime, System.DateTime searchEndTime, int sensitivity, TimeDuration searchInterval, ImageMask searchMask, bool ignoreInitialMotion, Size resultMotionMaskSize) {
            this.SmartSearchStartAsync(token, deviceId, searchBeginTime, searchEndTime, sensitivity, searchInterval, searchMask, ignoreInitialMotion, resultMotionMaskSize, null);
        }
        
        /// <remarks/>
        public void SmartSearchStartAsync(string token, System.Guid deviceId, System.DateTime searchBeginTime, System.DateTime searchEndTime, int sensitivity, TimeDuration searchInterval, ImageMask searchMask, bool ignoreInitialMotion, Size resultMotionMaskSize, object userState) {
            if ((this.SmartSearchStartOperationCompleted == null)) {
                this.SmartSearchStartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSmartSearchStartOperationCompleted);
            }
            this.InvokeAsync("SmartSearchStart", new object[] {
                        token,
                        deviceId,
                        searchBeginTime,
                        searchEndTime,
                        sensitivity,
                        searchInterval,
                        searchMask,
                        ignoreInitialMotion,
                        resultMotionMaskSize}, this.SmartSearchStartOperationCompleted, userState);
        }
        
        private void OnSmartSearchStartOperationCompleted(object arg) {
            if ((this.SmartSearchStartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SmartSearchStartCompleted(this, new SmartSearchStartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/SmartSearchCancel", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SmartSearchCancel(string token, System.Guid smartSearchId) {
            this.Invoke("SmartSearchCancel", new object[] {
                        token,
                        smartSearchId});
        }
        
        /// <remarks/>
        public void SmartSearchCancelAsync(string token, System.Guid smartSearchId) {
            this.SmartSearchCancelAsync(token, smartSearchId, null);
        }
        
        /// <remarks/>
        public void SmartSearchCancelAsync(string token, System.Guid smartSearchId, object userState) {
            if ((this.SmartSearchCancelOperationCompleted == null)) {
                this.SmartSearchCancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSmartSearchCancelOperationCompleted);
            }
            this.InvokeAsync("SmartSearchCancel", new object[] {
                        token,
                        smartSearchId}, this.SmartSearchCancelOperationCompleted, userState);
        }
        
        private void OnSmartSearchCancelOperationCompleted(object arg) {
            if ((this.SmartSearchCancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SmartSearchCancelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/SmartSearchGetStatus", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SmartSearchStatus SmartSearchGetStatus(string token, System.Guid smartSearchId) {
            object[] results = this.Invoke("SmartSearchGetStatus", new object[] {
                        token,
                        smartSearchId});
            return ((SmartSearchStatus)(results[0]));
        }
        
        /// <remarks/>
        public void SmartSearchGetStatusAsync(string token, System.Guid smartSearchId) {
            this.SmartSearchGetStatusAsync(token, smartSearchId, null);
        }
        
        /// <remarks/>
        public void SmartSearchGetStatusAsync(string token, System.Guid smartSearchId, object userState) {
            if ((this.SmartSearchGetStatusOperationCompleted == null)) {
                this.SmartSearchGetStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSmartSearchGetStatusOperationCompleted);
            }
            this.InvokeAsync("SmartSearchGetStatus", new object[] {
                        token,
                        smartSearchId}, this.SmartSearchGetStatusOperationCompleted, userState);
        }
        
        private void OnSmartSearchGetStatusOperationCompleted(object arg) {
            if ((this.SmartSearchGetStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SmartSearchGetStatusCompleted(this, new SmartSearchGetStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/SmartSearchGetResult", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SmartSearchResult SmartSearchGetResult(string token, System.Guid smartSearchId, bool continueSearch) {
            object[] results = this.Invoke("SmartSearchGetResult", new object[] {
                        token,
                        smartSearchId,
                        continueSearch});
            return ((SmartSearchResult)(results[0]));
        }
        
        /// <remarks/>
        public void SmartSearchGetResultAsync(string token, System.Guid smartSearchId, bool continueSearch) {
            this.SmartSearchGetResultAsync(token, smartSearchId, continueSearch, null);
        }
        
        /// <remarks/>
        public void SmartSearchGetResultAsync(string token, System.Guid smartSearchId, bool continueSearch, object userState) {
            if ((this.SmartSearchGetResultOperationCompleted == null)) {
                this.SmartSearchGetResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSmartSearchGetResultOperationCompleted);
            }
            this.InvokeAsync("SmartSearchGetResult", new object[] {
                        token,
                        smartSearchId,
                        continueSearch}, this.SmartSearchGetResultOperationCompleted, userState);
        }
        
        private void OnSmartSearchGetResultOperationCompleted(object arg) {
            if ((this.SmartSearchGetResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SmartSearchGetResultCompleted(this, new SmartSearchGetResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/JPEGGetAt", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public JPEGData JPEGGetAt(string token, System.Guid deviceId, System.DateTime time) {
            object[] results = this.Invoke("JPEGGetAt", new object[] {
                        token,
                        deviceId,
                        time});
            return ((JPEGData)(results[0]));
        }
        
        /// <remarks/>
        public void JPEGGetAtAsync(string token, System.Guid deviceId, System.DateTime time) {
            this.JPEGGetAtAsync(token, deviceId, time, null);
        }
        
        /// <remarks/>
        public void JPEGGetAtAsync(string token, System.Guid deviceId, System.DateTime time, object userState) {
            if ((this.JPEGGetAtOperationCompleted == null)) {
                this.JPEGGetAtOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJPEGGetAtOperationCompleted);
            }
            this.InvokeAsync("JPEGGetAt", new object[] {
                        token,
                        deviceId,
                        time}, this.JPEGGetAtOperationCompleted, userState);
        }
        
        private void OnJPEGGetAtOperationCompleted(object arg) {
            if ((this.JPEGGetAtCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.JPEGGetAtCompleted(this, new JPEGGetAtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/JPEGGetAtOrBefore", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public JPEGData JPEGGetAtOrBefore(string token, System.Guid deviceId, System.DateTime time) {
            object[] results = this.Invoke("JPEGGetAtOrBefore", new object[] {
                        token,
                        deviceId,
                        time});
            return ((JPEGData)(results[0]));
        }
        
        /// <remarks/>
        public void JPEGGetAtOrBeforeAsync(string token, System.Guid deviceId, System.DateTime time) {
            this.JPEGGetAtOrBeforeAsync(token, deviceId, time, null);
        }
        
        /// <remarks/>
        public void JPEGGetAtOrBeforeAsync(string token, System.Guid deviceId, System.DateTime time, object userState) {
            if ((this.JPEGGetAtOrBeforeOperationCompleted == null)) {
                this.JPEGGetAtOrBeforeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJPEGGetAtOrBeforeOperationCompleted);
            }
            this.InvokeAsync("JPEGGetAtOrBefore", new object[] {
                        token,
                        deviceId,
                        time}, this.JPEGGetAtOrBeforeOperationCompleted, userState);
        }
        
        private void OnJPEGGetAtOrBeforeOperationCompleted(object arg) {
            if ((this.JPEGGetAtOrBeforeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.JPEGGetAtOrBeforeCompleted(this, new JPEGGetAtOrBeforeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/JPEGGetAtOrAfter", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public JPEGData JPEGGetAtOrAfter(string token, System.Guid deviceId, System.DateTime time) {
            object[] results = this.Invoke("JPEGGetAtOrAfter", new object[] {
                        token,
                        deviceId,
                        time});
            return ((JPEGData)(results[0]));
        }
        
        /// <remarks/>
        public void JPEGGetAtOrAfterAsync(string token, System.Guid deviceId, System.DateTime time) {
            this.JPEGGetAtOrAfterAsync(token, deviceId, time, null);
        }
        
        /// <remarks/>
        public void JPEGGetAtOrAfterAsync(string token, System.Guid deviceId, System.DateTime time, object userState) {
            if ((this.JPEGGetAtOrAfterOperationCompleted == null)) {
                this.JPEGGetAtOrAfterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJPEGGetAtOrAfterOperationCompleted);
            }
            this.InvokeAsync("JPEGGetAtOrAfter", new object[] {
                        token,
                        deviceId,
                        time}, this.JPEGGetAtOrAfterOperationCompleted, userState);
        }
        
        private void OnJPEGGetAtOrAfterOperationCompleted(object arg) {
            if ((this.JPEGGetAtOrAfterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.JPEGGetAtOrAfterCompleted(this, new JPEGGetAtOrAfterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/JPEGGetLive", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public JPEGData JPEGGetLive(string token, System.Guid deviceId, int maxWidth, int maxHeight) {
            object[] results = this.Invoke("JPEGGetLive", new object[] {
                        token,
                        deviceId,
                        maxWidth,
                        maxHeight});
            return ((JPEGData)(results[0]));
        }
        
        /// <remarks/>
        public void JPEGGetLiveAsync(string token, System.Guid deviceId, int maxWidth, int maxHeight) {
            this.JPEGGetLiveAsync(token, deviceId, maxWidth, maxHeight, null);
        }
        
        /// <remarks/>
        public void JPEGGetLiveAsync(string token, System.Guid deviceId, int maxWidth, int maxHeight, object userState) {
            if ((this.JPEGGetLiveOperationCompleted == null)) {
                this.JPEGGetLiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJPEGGetLiveOperationCompleted);
            }
            this.InvokeAsync("JPEGGetLive", new object[] {
                        token,
                        deviceId,
                        maxWidth,
                        maxHeight}, this.JPEGGetLiveOperationCompleted, userState);
        }
        
        private void OnJPEGGetLiveOperationCompleted(object arg) {
            if ((this.JPEGGetLiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.JPEGGetLiveCompleted(this, new JPEGGetLiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/InputGetState", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IOState InputGetState(string token, System.Guid deviceId) {
            object[] results = this.Invoke("InputGetState", new object[] {
                        token,
                        deviceId});
            return ((IOState)(results[0]));
        }
        
        /// <remarks/>
        public void InputGetStateAsync(string token, System.Guid deviceId) {
            this.InputGetStateAsync(token, deviceId, null);
        }
        
        /// <remarks/>
        public void InputGetStateAsync(string token, System.Guid deviceId, object userState) {
            if ((this.InputGetStateOperationCompleted == null)) {
                this.InputGetStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInputGetStateOperationCompleted);
            }
            this.InvokeAsync("InputGetState", new object[] {
                        token,
                        deviceId}, this.InputGetStateOperationCompleted, userState);
        }
        
        private void OnInputGetStateOperationCompleted(object arg) {
            if ((this.InputGetStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InputGetStateCompleted(this, new InputGetStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/StartRecording", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool StartRecording(string token, System.Guid deviceId, long recordingTimeMicroSeconds) {
            object[] results = this.Invoke("StartRecording", new object[] {
                        token,
                        deviceId,
                        recordingTimeMicroSeconds});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void StartRecordingAsync(string token, System.Guid deviceId, long recordingTimeMicroSeconds) {
            this.StartRecordingAsync(token, deviceId, recordingTimeMicroSeconds, null);
        }
        
        /// <remarks/>
        public void StartRecordingAsync(string token, System.Guid deviceId, long recordingTimeMicroSeconds, object userState) {
            if ((this.StartRecordingOperationCompleted == null)) {
                this.StartRecordingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartRecordingOperationCompleted);
            }
            this.InvokeAsync("StartRecording", new object[] {
                        token,
                        deviceId,
                        recordingTimeMicroSeconds}, this.StartRecordingOperationCompleted, userState);
        }
        
        private void OnStartRecordingOperationCompleted(object arg) {
            if ((this.StartRecordingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartRecordingCompleted(this, new StartRecordingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/SendDriverCommand", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendDriverCommand(string token, System.Guid deviceId, string command) {
            this.Invoke("SendDriverCommand", new object[] {
                        token,
                        deviceId,
                        command});
        }
        
        /// <remarks/>
        public void SendDriverCommandAsync(string token, System.Guid deviceId, string command) {
            this.SendDriverCommandAsync(token, deviceId, command, null);
        }
        
        /// <remarks/>
        public void SendDriverCommandAsync(string token, System.Guid deviceId, string command, object userState) {
            if ((this.SendDriverCommandOperationCompleted == null)) {
                this.SendDriverCommandOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendDriverCommandOperationCompleted);
            }
            this.InvokeAsync("SendDriverCommand", new object[] {
                        token,
                        deviceId,
                        command}, this.SendDriverCommandOperationCompleted, userState);
        }
        
        private void OnSendDriverCommandOperationCompleted(object arg) {
            if ((this.SendDriverCommandCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendDriverCommandCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/SendDriverCommandWithResponse", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendDriverCommandWithResponse(string token, System.Guid deviceId, string command, string parameter) {
            object[] results = this.Invoke("SendDriverCommandWithResponse", new object[] {
                        token,
                        deviceId,
                        command,
                        parameter});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendDriverCommandWithResponseAsync(string token, System.Guid deviceId, string command, string parameter) {
            this.SendDriverCommandWithResponseAsync(token, deviceId, command, parameter, null);
        }
        
        /// <remarks/>
        public void SendDriverCommandWithResponseAsync(string token, System.Guid deviceId, string command, string parameter, object userState) {
            if ((this.SendDriverCommandWithResponseOperationCompleted == null)) {
                this.SendDriverCommandWithResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendDriverCommandWithResponseOperationCompleted);
            }
            this.InvokeAsync("SendDriverCommandWithResponse", new object[] {
                        token,
                        deviceId,
                        command,
                        parameter}, this.SendDriverCommandWithResponseOperationCompleted, userState);
        }
        
        private void OnSendDriverCommandWithResponseOperationCompleted(object arg) {
            if ((this.SendDriverCommandWithResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendDriverCommandWithResponseCompleted(this, new SendDriverCommandWithResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/MulticastStart", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MulticastInfo[] MulticastStart(string token, System.Guid[] deviceIds, ClientCapabilities clientCapabilities) {
            object[] results = this.Invoke("MulticastStart", new object[] {
                        token,
                        deviceIds,
                        clientCapabilities});
            return ((MulticastInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void MulticastStartAsync(string token, System.Guid[] deviceIds, ClientCapabilities clientCapabilities) {
            this.MulticastStartAsync(token, deviceIds, clientCapabilities, null);
        }
        
        /// <remarks/>
        public void MulticastStartAsync(string token, System.Guid[] deviceIds, ClientCapabilities clientCapabilities, object userState) {
            if ((this.MulticastStartOperationCompleted == null)) {
                this.MulticastStartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMulticastStartOperationCompleted);
            }
            this.InvokeAsync("MulticastStart", new object[] {
                        token,
                        deviceIds,
                        clientCapabilities}, this.MulticastStartOperationCompleted, userState);
        }
        
        private void OnMulticastStartOperationCompleted(object arg) {
            if ((this.MulticastStartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MulticastStartCompleted(this, new MulticastStartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/MulticastContinue", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MulticastContinue(string token, System.Guid[] multicastSessionIds) {
            this.Invoke("MulticastContinue", new object[] {
                        token,
                        multicastSessionIds});
        }
        
        /// <remarks/>
        public void MulticastContinueAsync(string token, System.Guid[] multicastSessionIds) {
            this.MulticastContinueAsync(token, multicastSessionIds, null);
        }
        
        /// <remarks/>
        public void MulticastContinueAsync(string token, System.Guid[] multicastSessionIds, object userState) {
            if ((this.MulticastContinueOperationCompleted == null)) {
                this.MulticastContinueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMulticastContinueOperationCompleted);
            }
            this.InvokeAsync("MulticastContinue", new object[] {
                        token,
                        multicastSessionIds}, this.MulticastContinueOperationCompleted, userState);
        }
        
        private void OnMulticastContinueOperationCompleted(object arg) {
            if ((this.MulticastContinueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MulticastContinueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/MulticastStop", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MulticastStop(string token, System.Guid[] multicastSessionIds) {
            this.Invoke("MulticastStop", new object[] {
                        token,
                        multicastSessionIds});
        }
        
        /// <remarks/>
        public void MulticastStopAsync(string token, System.Guid[] multicastSessionIds) {
            this.MulticastStopAsync(token, multicastSessionIds, null);
        }
        
        /// <remarks/>
        public void MulticastStopAsync(string token, System.Guid[] multicastSessionIds, object userState) {
            if ((this.MulticastStopOperationCompleted == null)) {
                this.MulticastStopOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMulticastStopOperationCompleted);
            }
            this.InvokeAsync("MulticastStop", new object[] {
                        token,
                        multicastSessionIds}, this.MulticastStopOperationCompleted, userState);
        }
        
        private void OnMulticastStopOperationCompleted(object arg) {
            if ((this.MulticastStopCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MulticastStopCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/IsManualRecording", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ManualRecordingInfo[] IsManualRecording(string token, System.Guid[] deviceIds) {
            object[] results = this.Invoke("IsManualRecording", new object[] {
                        token,
                        deviceIds});
            return ((ManualRecordingInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void IsManualRecordingAsync(string token, System.Guid[] deviceIds) {
            this.IsManualRecordingAsync(token, deviceIds, null);
        }
        
        /// <remarks/>
        public void IsManualRecordingAsync(string token, System.Guid[] deviceIds, object userState) {
            if ((this.IsManualRecordingOperationCompleted == null)) {
                this.IsManualRecordingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsManualRecordingOperationCompleted);
            }
            this.InvokeAsync("IsManualRecording", new object[] {
                        token,
                        deviceIds}, this.IsManualRecordingOperationCompleted, userState);
        }
        
        private void OnIsManualRecordingOperationCompleted(object arg) {
            if ((this.IsManualRecordingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsManualRecordingCompleted(this, new IsManualRecordingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/StartManualRecording", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ManualRecordingResult[] StartManualRecording(string token, System.Guid[] deviceIds) {
            object[] results = this.Invoke("StartManualRecording", new object[] {
                        token,
                        deviceIds});
            return ((ManualRecordingResult[])(results[0]));
        }
        
        /// <remarks/>
        public void StartManualRecordingAsync(string token, System.Guid[] deviceIds) {
            this.StartManualRecordingAsync(token, deviceIds, null);
        }
        
        /// <remarks/>
        public void StartManualRecordingAsync(string token, System.Guid[] deviceIds, object userState) {
            if ((this.StartManualRecordingOperationCompleted == null)) {
                this.StartManualRecordingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartManualRecordingOperationCompleted);
            }
            this.InvokeAsync("StartManualRecording", new object[] {
                        token,
                        deviceIds}, this.StartManualRecordingOperationCompleted, userState);
        }
        
        private void OnStartManualRecordingOperationCompleted(object arg) {
            if ((this.StartManualRecordingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartManualRecordingCompleted(this, new StartManualRecordingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://videoos.net/2/XProtectCSRecorderCommand/StopManualRecording", RequestNamespace="http://videoos.net/2/XProtectCSRecorderCommand", ResponseNamespace="http://videoos.net/2/XProtectCSRecorderCommand", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ManualRecordingResult[] StopManualRecording(string token, System.Guid[] deviceIds) {
            object[] results = this.Invoke("StopManualRecording", new object[] {
                        token,
                        deviceIds});
            return ((ManualRecordingResult[])(results[0]));
        }
        
        /// <remarks/>
        public void StopManualRecordingAsync(string token, System.Guid[] deviceIds) {
            this.StopManualRecordingAsync(token, deviceIds, null);
        }
        
        /// <remarks/>
        public void StopManualRecordingAsync(string token, System.Guid[] deviceIds, object userState) {
            if ((this.StopManualRecordingOperationCompleted == null)) {
                this.StopManualRecordingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopManualRecordingOperationCompleted);
            }
            this.InvokeAsync("StopManualRecording", new object[] {
                        token,
                        deviceIds}, this.StopManualRecordingOperationCompleted, userState);
        }
        
        private void OnStopManualRecordingOperationCompleted(object arg) {
            if ((this.StopManualRecordingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StopManualRecordingCompleted(this, new StopManualRecordingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public partial class PTZArgs {
        
        private PTZPairDouble[] movementField;
        
        private PTZPairDouble[] speedField;
        
        private PTZPairBoolean[] automaticField;
        
        private bool normalizedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("movement")]
        public PTZPairDouble[] movement {
            get {
                return this.movementField;
            }
            set {
                this.movementField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("speed")]
        public PTZPairDouble[] speed {
            get {
                return this.speedField;
            }
            set {
                this.speedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("automatic")]
        public PTZPairBoolean[] automatic {
            get {
                return this.automaticField;
            }
            set {
                this.automaticField = value;
            }
        }
        
        /// <remarks/>
        public bool Normalized {
            get {
                return this.normalizedField;
            }
            set {
                this.normalizedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public partial class PTZPairDouble {
        
        private string nameField;
        
        private double valueField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public double value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public partial class ManualRecordingResult {
        
        private System.Guid deviceIdField;
        
        private int resultCodeField;
        
        private string messageField;
        
        /// <remarks/>
        public System.Guid DeviceId {
            get {
                return this.deviceIdField;
            }
            set {
                this.deviceIdField = value;
            }
        }
        
        /// <remarks/>
        public int ResultCode {
            get {
                return this.resultCodeField;
            }
            set {
                this.resultCodeField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public partial class ManualRecordingInfo {
        
        private System.Guid deviceIdField;
        
        private bool isManualRecordingField;
        
        /// <remarks/>
        public System.Guid DeviceId {
            get {
                return this.deviceIdField;
            }
            set {
                this.deviceIdField = value;
            }
        }
        
        /// <remarks/>
        public bool IsManualRecording {
            get {
                return this.isManualRecordingField;
            }
            set {
                this.isManualRecordingField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public partial class MulticastInfo {
        
        private System.Guid deviceIdField;
        
        private string iPAddressField;
        
        private int serverPortField;
        
        private int clientPortField;
        
        private TimeDuration keepAliveIntervalField;
        
        private bool encryptedField;
        
        private System.Guid multicastSessionIdField;
        
        private uint sSRCField;
        
        private string privacyMaskField;
        
        private int privacyMaskVersionField;
        
        private bool successField;
        
        /// <remarks/>
        public System.Guid DeviceId {
            get {
                return this.deviceIdField;
            }
            set {
                this.deviceIdField = value;
            }
        }
        
        /// <remarks/>
        public string IPAddress {
            get {
                return this.iPAddressField;
            }
            set {
                this.iPAddressField = value;
            }
        }
        
        /// <remarks/>
        public int ServerPort {
            get {
                return this.serverPortField;
            }
            set {
                this.serverPortField = value;
            }
        }
        
        /// <remarks/>
        public int ClientPort {
            get {
                return this.clientPortField;
            }
            set {
                this.clientPortField = value;
            }
        }
        
        /// <remarks/>
        public TimeDuration KeepAliveInterval {
            get {
                return this.keepAliveIntervalField;
            }
            set {
                this.keepAliveIntervalField = value;
            }
        }
        
        /// <remarks/>
        public bool Encrypted {
            get {
                return this.encryptedField;
            }
            set {
                this.encryptedField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid MulticastSessionId {
            get {
                return this.multicastSessionIdField;
            }
            set {
                this.multicastSessionIdField = value;
            }
        }
        
        /// <remarks/>
        public uint SSRC {
            get {
                return this.sSRCField;
            }
            set {
                this.sSRCField = value;
            }
        }
        
        /// <remarks/>
        public string PrivacyMask {
            get {
                return this.privacyMaskField;
            }
            set {
                this.privacyMaskField = value;
            }
        }
        
        /// <remarks/>
        public int PrivacyMaskVersion {
            get {
                return this.privacyMaskVersionField;
            }
            set {
                this.privacyMaskVersionField = value;
            }
        }
        
        /// <remarks/>
        public bool Success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public partial class TimeDuration {
        
        private long microSecondsField;
        
        /// <remarks/>
        public long MicroSeconds {
            get {
                return this.microSecondsField;
            }
            set {
                this.microSecondsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public partial class ClientCapabilities {
        
        private bool privacyMaskField;
        
        private int privacyMaskVersionField;
        
        /// <remarks/>
        public bool PrivacyMask {
            get {
                return this.privacyMaskField;
            }
            set {
                this.privacyMaskField = value;
            }
        }
        
        /// <remarks/>
        public int PrivacyMaskVersion {
            get {
                return this.privacyMaskVersionField;
            }
            set {
                this.privacyMaskVersionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public partial class JPEGData {
        
        private System.DateTime timeField;
        
        private byte[] dataField;
        
        /// <remarks/>
        public System.DateTime Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public partial class MotionAreaInfo {
        
        private int xField;
        
        private int yField;
        
        private int widthField;
        
        private int heightField;
        
        /// <remarks/>
        public int X {
            get {
                return this.xField;
            }
            set {
                this.xField = value;
            }
        }
        
        /// <remarks/>
        public int Y {
            get {
                return this.yField;
            }
            set {
                this.yField = value;
            }
        }
        
        /// <remarks/>
        public int Width {
            get {
                return this.widthField;
            }
            set {
                this.widthField = value;
            }
        }
        
        /// <remarks/>
        public int Height {
            get {
                return this.heightField;
            }
            set {
                this.heightField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public partial class MotionAreaInfos {
        
        private Size resolutionField;
        
        private MotionAreaInfo[] areasField;
        
        /// <remarks/>
        public Size Resolution {
            get {
                return this.resolutionField;
            }
            set {
                this.resolutionField = value;
            }
        }
        
        /// <remarks/>
        public MotionAreaInfo[] Areas {
            get {
                return this.areasField;
            }
            set {
                this.areasField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public partial class Size {
        
        private int widthField;
        
        private int heightField;
        
        /// <remarks/>
        public int Width {
            get {
                return this.widthField;
            }
            set {
                this.widthField = value;
            }
        }
        
        /// <remarks/>
        public int Height {
            get {
                return this.heightField;
            }
            set {
                this.heightField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public partial class SmartSearchResult {
        
        private System.DateTime imageTimeField;
        
        private ImageMask motionMaskField;
        
        private MotionAreaInfos motionAreasField;
        
        /// <remarks/>
        public System.DateTime ImageTime {
            get {
                return this.imageTimeField;
            }
            set {
                this.imageTimeField = value;
            }
        }
        
        /// <remarks/>
        public ImageMask MotionMask {
            get {
                return this.motionMaskField;
            }
            set {
                this.motionMaskField = value;
            }
        }
        
        /// <remarks/>
        public MotionAreaInfos MotionAreas {
            get {
                return this.motionAreasField;
            }
            set {
                this.motionAreasField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public partial class ImageMask {
        
        private Size sizeField;
        
        private string maskField;
        
        /// <remarks/>
        public Size Size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
            }
        }
        
        /// <remarks/>
        public string Mask {
            get {
                return this.maskField;
            }
            set {
                this.maskField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public partial class SmartSearchStatus {
        
        private System.DateTime currentSearchTimeField;
        
        private SmartSearchStatusType statusField;
        
        /// <remarks/>
        public System.DateTime CurrentSearchTime {
            get {
                return this.currentSearchTimeField;
            }
            set {
                this.currentSearchTimeField = value;
            }
        }
        
        /// <remarks/>
        public SmartSearchStatusType Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public enum SmartSearchStatusType {
        
        /// <remarks/>
        UnspecifiedError,
        
        /// <remarks/>
        SearchInProgress,
        
        /// <remarks/>
        SearchResultReady,
        
        /// <remarks/>
        SearchEndTimeReached,
        
        /// <remarks/>
        SearchCancelled,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public partial class TimeLineInformationData {
        
        private System.Guid deviceIdField;
        
        private System.Guid typeField;
        
        private System.DateTime beginTimeField;
        
        private TimeDuration intervalField;
        
        private int countField;
        
        private string dataField;
        
        /// <remarks/>
        public System.Guid DeviceId {
            get {
                return this.deviceIdField;
            }
            set {
                this.deviceIdField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime BeginTime {
            get {
                return this.beginTimeField;
            }
            set {
                this.beginTimeField = value;
            }
        }
        
        /// <remarks/>
        public TimeDuration Interval {
            get {
                return this.intervalField;
            }
            set {
                this.intervalField = value;
            }
        }
        
        /// <remarks/>
        public int Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        public string Data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public partial class SequenceEntry {
        
        private System.DateTime timeBeginField;
        
        private System.DateTime timeTriggedField;
        
        private System.DateTime timeEndField;
        
        /// <remarks/>
        public System.DateTime TimeBegin {
            get {
                return this.timeBeginField;
            }
            set {
                this.timeBeginField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime TimeTrigged {
            get {
                return this.timeTriggedField;
            }
            set {
                this.timeTriggedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime TimeEnd {
            get {
                return this.timeEndField;
            }
            set {
                this.timeEndField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public partial class SequenceType {
        
        private System.Guid idField;
        
        private string nameField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public partial class UserInfo {
        
        private string sidField;
        
        private string displayNameField;
        
        /// <remarks/>
        public string Sid {
            get {
                return this.sidField;
            }
            set {
                this.sidField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public partial class PtzSessionInfo {
        
        private System.Guid deviceIdField;
        
        private System.Guid patrollingProfileIdField;
        
        private System.Guid manualPatrollingProfileIdField;
        
        private UserInfo userField;
        
        private int priorityField;
        
        private bool reservedField;
        
        private bool isPatrollingField;
        
        private bool isAnonymousField;
        
        private bool isPausedField;
        
        private int timeoutSecField;
        
        private int timeoutLeftSecField;
        
        private bool isLicensedField;
        
        /// <remarks/>
        public System.Guid DeviceId {
            get {
                return this.deviceIdField;
            }
            set {
                this.deviceIdField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid PatrollingProfileId {
            get {
                return this.patrollingProfileIdField;
            }
            set {
                this.patrollingProfileIdField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid ManualPatrollingProfileId {
            get {
                return this.manualPatrollingProfileIdField;
            }
            set {
                this.manualPatrollingProfileIdField = value;
            }
        }
        
        /// <remarks/>
        public UserInfo User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        /// <remarks/>
        public int Priority {
            get {
                return this.priorityField;
            }
            set {
                this.priorityField = value;
            }
        }
        
        /// <remarks/>
        public bool Reserved {
            get {
                return this.reservedField;
            }
            set {
                this.reservedField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPatrolling {
            get {
                return this.isPatrollingField;
            }
            set {
                this.isPatrollingField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAnonymous {
            get {
                return this.isAnonymousField;
            }
            set {
                this.isAnonymousField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPaused {
            get {
                return this.isPausedField;
            }
            set {
                this.isPausedField = value;
            }
        }
        
        /// <remarks/>
        public int TimeoutSec {
            get {
                return this.timeoutSecField;
            }
            set {
                this.timeoutSecField = value;
            }
        }
        
        /// <remarks/>
        public int TimeoutLeftSec {
            get {
                return this.timeoutLeftSecField;
            }
            set {
                this.timeoutLeftSecField = value;
            }
        }
        
        /// <remarks/>
        public bool IsLicensed {
            get {
                return this.isLicensedField;
            }
            set {
                this.isLicensedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public partial class PTZPairBoolean {
        
        private string nameField;
        
        private bool valueField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public bool value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://videoos.net/2/XProtectCSRecorderCommand")]
    public enum IOState {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        Activated,
        
        /// <remarks/>
        Deactivated,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetVersionCompletedEventHandler(object sender, GetVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PTZMoveAbsoluteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PTZMoveRelativeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PTZMoveHomeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PTZMoveStartCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PTZMoveStopCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PTZCenterCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PTZRectangleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PTZGetAbsolutePositionCompletedEventHandler(object sender, PTZGetAbsolutePositionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PTZGetAbsolutePositionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PTZGetAbsolutePositionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PTZArgs Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PTZArgs)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PTZExtendedManualSessionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PTZGetSessionInfoCompletedEventHandler(object sender, PTZGetSessionInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PTZGetSessionInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PTZGetSessionInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PtzSessionInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PtzSessionInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PTZReserveSessionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PTZReleaseSessionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PTZActivatePatrollingSchemaCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PTZDeactivatePatrollingSchemaCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PresetGetListCompletedEventHandler(object sender, PresetGetListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PresetGetListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PresetGetListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PresetMoveToCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PresetSetCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void OutputActivateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void OutputDeactivateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void OutputTriggerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void OutputGetStateCompletedEventHandler(object sender, OutputGetStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OutputGetStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OutputGetStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IOState Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IOState)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SequencesGetTypesCompletedEventHandler(object sender, SequencesGetTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SequencesGetTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SequencesGetTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SequenceType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SequenceType[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SequencesGetCompletedEventHandler(object sender, SequencesGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SequencesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SequencesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SequenceEntry[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SequenceEntry[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SequencesGetAroundCompletedEventHandler(object sender, SequencesGetAroundCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SequencesGetAroundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SequencesGetAroundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SequenceEntry[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SequenceEntry[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SequencesGetAroundWithSpanCompletedEventHandler(object sender, SequencesGetAroundWithSpanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SequencesGetAroundWithSpanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SequencesGetAroundWithSpanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SequenceEntry[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SequenceEntry[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetRetentionTimeLimitCompletedEventHandler(object sender, GetRetentionTimeLimitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRetentionTimeLimitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRetentionTimeLimitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TimeLineInformationGetCompletedEventHandler(object sender, TimeLineInformationGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TimeLineInformationGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TimeLineInformationGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TimeLineInformationData[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TimeLineInformationData[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SmartSearchStartCompletedEventHandler(object sender, SmartSearchStartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SmartSearchStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SmartSearchStartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SmartSearchCancelCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SmartSearchGetStatusCompletedEventHandler(object sender, SmartSearchGetStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SmartSearchGetStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SmartSearchGetStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SmartSearchStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SmartSearchStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SmartSearchGetResultCompletedEventHandler(object sender, SmartSearchGetResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SmartSearchGetResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SmartSearchGetResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SmartSearchResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SmartSearchResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void JPEGGetAtCompletedEventHandler(object sender, JPEGGetAtCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JPEGGetAtCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal JPEGGetAtCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public JPEGData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((JPEGData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void JPEGGetAtOrBeforeCompletedEventHandler(object sender, JPEGGetAtOrBeforeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JPEGGetAtOrBeforeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal JPEGGetAtOrBeforeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public JPEGData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((JPEGData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void JPEGGetAtOrAfterCompletedEventHandler(object sender, JPEGGetAtOrAfterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JPEGGetAtOrAfterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal JPEGGetAtOrAfterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public JPEGData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((JPEGData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void JPEGGetLiveCompletedEventHandler(object sender, JPEGGetLiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JPEGGetLiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal JPEGGetLiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public JPEGData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((JPEGData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InputGetStateCompletedEventHandler(object sender, InputGetStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InputGetStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InputGetStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IOState Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IOState)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void StartRecordingCompletedEventHandler(object sender, StartRecordingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartRecordingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartRecordingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendDriverCommandCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendDriverCommandWithResponseCompletedEventHandler(object sender, SendDriverCommandWithResponseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendDriverCommandWithResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendDriverCommandWithResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MulticastStartCompletedEventHandler(object sender, MulticastStartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MulticastStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MulticastStartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MulticastInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MulticastInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MulticastContinueCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MulticastStopCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void IsManualRecordingCompletedEventHandler(object sender, IsManualRecordingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsManualRecordingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsManualRecordingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ManualRecordingInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ManualRecordingInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void StartManualRecordingCompletedEventHandler(object sender, StartManualRecordingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartManualRecordingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartManualRecordingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ManualRecordingResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ManualRecordingResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void StopManualRecordingCompletedEventHandler(object sender, StopManualRecordingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StopManualRecordingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StopManualRecordingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ManualRecordingResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ManualRecordingResult[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591